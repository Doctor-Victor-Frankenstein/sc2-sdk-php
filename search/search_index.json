{
    "docs": [
        {
            "location": "/",
            "text": "SteemConnect PHP SDK\n\u00b6\n\n\nThis is the documentation for \nSteemConnect\n \nPHP SDK\n, which is available at \nhttps://github.com/hernandev/sc2-sdk-php\n.\n\n\nHow to Read the Code Examples.\n\u00b6\n\n\nThis documentation was built with several code examples.\n\n\nFor code highlighting and easy to understand reasons, any PHP code will start with a \n<?php\n sign, and, on a given documentation page scope, when a given code example is a sequence of a previous example, it will be indicated by a \n// ...\n line, meaning that the current code is a continuation of the previous one.\n\n\nWhat this library is about?\n\u00b6\n\n\nThis library allows for interaction with \nSteemConnect\n (v2) on PHP projects.\n\n\nMeaning this library can achieve two things:\n\n\nHandle authentication flow:\n\u00b6\n\n\nAuthentication and Authorization flow though OAuth.\n\n\nBuild and broadcast operations:\n\u00b6\n\n\nBroadcast Steem blockchain operations through SteemConnect.\n\n\nWhat this library is NOT about:\n\u00b6\n\n\nThis library is intended to be a SteemConnect client for PHP only. Meaning no additional scopes were incorporated.\n\n\nParsing transactions and content display is not a part of this project.\n\n\nIf you are looking into displaying Steem blockchain posts, you may use another project of mine, \nLightRPC\n.",
            "title": "Home"
        },
        {
            "location": "/#steemconnect-php-sdk",
            "text": "This is the documentation for  SteemConnect   PHP SDK , which is available at  https://github.com/hernandev/sc2-sdk-php .",
            "title": "SteemConnect PHP SDK"
        },
        {
            "location": "/#how-to-read-the-code-examples",
            "text": "This documentation was built with several code examples.  For code highlighting and easy to understand reasons, any PHP code will start with a  <?php  sign, and, on a given documentation page scope, when a given code example is a sequence of a previous example, it will be indicated by a  // ...  line, meaning that the current code is a continuation of the previous one.",
            "title": "How to Read the Code Examples."
        },
        {
            "location": "/#what-this-library-is-about",
            "text": "This library allows for interaction with  SteemConnect  (v2) on PHP projects.  Meaning this library can achieve two things:",
            "title": "What this library is about?"
        },
        {
            "location": "/#handle-authentication-flow",
            "text": "Authentication and Authorization flow though OAuth.",
            "title": "Handle authentication flow:"
        },
        {
            "location": "/#build-and-broadcast-operations",
            "text": "Broadcast Steem blockchain operations through SteemConnect.",
            "title": "Build and broadcast operations:"
        },
        {
            "location": "/#what-this-library-is-not-about",
            "text": "This library is intended to be a SteemConnect client for PHP only. Meaning no additional scopes were incorporated.  Parsing transactions and content display is not a part of this project.  If you are looking into displaying Steem blockchain posts, you may use another project of mine,  LightRPC .",
            "title": "What this library is NOT about:"
        },
        {
            "location": "/01-configuration/",
            "text": "Configuration\n\u00b6\n\n\nBefore heading into SDK usage, we need to configure it, with credentials, return url and scopes.\n\n\nConfiguration Class.\n\u00b6\n\n\nTo start, we are going to create an instance of \nSteemConnect\\Config\\Config\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n<?php\n\n\n\nuse\n \nSteemConnect\\Config\\Config\n;\n\n\n\n// the client id and secret can be obtained on SteemConnect dashboard.\n\n\n$clientId\n \n=\n \n'your-steem-connect-client-id'\n;\n\n\n$clientSecret\n \n=\n \n'your-steem-connect-client-secret'\n;\n\n\n\n// create the configuration instance, using  the credentials.\n\n\n$config\n \n=\n \nnew\n \nConfig\n(\n$clientId\n,\n \n$clientSecret\n);\n\n\n\n\n\n\n\nReturn URL.\n\u00b6\n\n\nThe return URL is a parameter for the OAuth authorization flow. This URL will receive\nthe temporary code from SteemConnect after the user authorizes your application\nto act on the their behalf.\n\n\nTo configure the return URL, you just call the \nsetReturnUrl\n method on the Config object:\n\n\n1\n2\n3\n4\n5\n6\n<?php\n\n\n\n// ...\n\n\n\n// set the return URL on config.\n\n\n$config\n->\nsetReturnUrl\n(\n'https://your-steem-app/auth/callback'\n);\n\n\n\n\n\n\n\n\n\nNote\n\n\nThe URL being used on configuration must match the one configured on SteemConnect dashboard, otherwise the authorization flow will fail.\n\n\n\n\nScopes.\n\u00b6\n\n\nOther required configuration are which scopes your application requires.\n\n\nOn the OAuth flow, a scope could be translated to which permissions your users will grant you.\n\n\nThere are several scopes available. The list of scopes presented here may change with time, so, an up-to-date reference can fe found at \nSteemConnect wiki\n.\n\n\n\n\n\n\n\n\nScope\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlogin\n\n\nVerify Steem identity\n\n\n\n\n\n\noffline\n\n\nAllow long-lived token\n\n\n\n\n\n\nvote\n\n\nUpvote, downvote or unvote a post or comment\n\n\n\n\n\n\ncomment\n\n\nPublish or edit a post or a comment\n\n\n\n\n\n\ncomment_delete\n\n\nDelete a post or a comment\n\n\n\n\n\n\ncomment_options\n\n\nAdd options for a post or comment\n\n\n\n\n\n\ncustom_json\n\n\nFollow, unfollow, ignore, reblog or any custom_json operation\n\n\n\n\n\n\nclaim_reward_balance\n\n\nClaim reward for user\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nIf your application only needs to verify the user identity, the required scope \nlogin\n does not persist changes on the user account, so be sure to remember the user session to avoid the authorization dialog in every visit.\n\n\n\n\nTo configure the scopes your application will require, just call the \nsetScopes\n method on the config object, passing those scopes as an array:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n<?php\n\n\n\n// ...\n\n\n\n// set the required scopes on the configuration.\n\n\n$config\n->\nsetScopes\n([\n\n    \n'login'\n,\n\n    \n'vote'\n,\n\n    \n'comment'\n\n\n]);\n\n\n\n\n\n\n\nApplication and Community Name.\n\u00b6\n\n\nAn optional but interesting feature, is to configure both the application and community names. Those are used to indicate\nwhat application was used to make the post, and some frontend will display that information.\n\n\nIf you don't know what I'm talking about, here is an example:\n\n\n\n\nThe syntax for application name, as of right now, is \nlowercase-app-name/version\n, here's an example:\n\n\n1\n2\n3\n4\n5\n6\n<?php\n\n\n\n// ...\n\n\n\n// set the application name and version.\n\n\n$config\n->\nsetApp\n(\n'coolapp/2.4'\n);\n\n\n\n\n\n\n\nThe same way, it's possible to set the community name:\n\n\n1\n2\n3\n4\n5\n6\n<?php\n\n\n\n// ...\n\n\n\n// set the community name.\n\n\n$config\n->\nsetCommunity\n(\n'CoolApp'\n);\n\n\n\n\n\n\n\nCustom SteemConnect Servers.\n\u00b6\n\n\nIf for some reason, you are using a custom install of SteemConnect (a development install, for example), you may\nchange the base URL so all calls will use that domain.\n\n\n1\n2\n3\n4\n5\n6\n<?php\n\n\n\n// ...\n\n\n\n// customize the SteemConnect address.\n\n\n$config\n->\nsetBaseUrl\n(\n'https://my-custom-steemconnect.com'\n);",
            "title": "Configuration"
        },
        {
            "location": "/01-configuration/#configuration",
            "text": "Before heading into SDK usage, we need to configure it, with credentials, return url and scopes.",
            "title": "Configuration"
        },
        {
            "location": "/01-configuration/#configuration-class",
            "text": "To start, we are going to create an instance of  SteemConnect\\Config\\Config .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 <?php  use   SteemConnect\\Config\\Config ;  // the client id and secret can be obtained on SteemConnect dashboard.  $clientId   =   'your-steem-connect-client-id' ;  $clientSecret   =   'your-steem-connect-client-secret' ;  // create the configuration instance, using  the credentials.  $config   =   new   Config ( $clientId ,   $clientSecret );",
            "title": "Configuration Class."
        },
        {
            "location": "/01-configuration/#return-url",
            "text": "The return URL is a parameter for the OAuth authorization flow. This URL will receive\nthe temporary code from SteemConnect after the user authorizes your application\nto act on the their behalf.  To configure the return URL, you just call the  setReturnUrl  method on the Config object:  1\n2\n3\n4\n5\n6 <?php  // ...  // set the return URL on config.  $config -> setReturnUrl ( 'https://your-steem-app/auth/callback' );     Note  The URL being used on configuration must match the one configured on SteemConnect dashboard, otherwise the authorization flow will fail.",
            "title": "Return URL."
        },
        {
            "location": "/01-configuration/#scopes",
            "text": "Other required configuration are which scopes your application requires.  On the OAuth flow, a scope could be translated to which permissions your users will grant you.  There are several scopes available. The list of scopes presented here may change with time, so, an up-to-date reference can fe found at  SteemConnect wiki .     Scope  Description      login  Verify Steem identity    offline  Allow long-lived token    vote  Upvote, downvote or unvote a post or comment    comment  Publish or edit a post or a comment    comment_delete  Delete a post or a comment    comment_options  Add options for a post or comment    custom_json  Follow, unfollow, ignore, reblog or any custom_json operation    claim_reward_balance  Claim reward for user      Note  If your application only needs to verify the user identity, the required scope  login  does not persist changes on the user account, so be sure to remember the user session to avoid the authorization dialog in every visit.   To configure the scopes your application will require, just call the  setScopes  method on the config object, passing those scopes as an array:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 <?php  // ...  // set the required scopes on the configuration.  $config -> setScopes ([ \n     'login' , \n     'vote' , \n     'comment'  ]);",
            "title": "Scopes."
        },
        {
            "location": "/01-configuration/#application-and-community-name",
            "text": "An optional but interesting feature, is to configure both the application and community names. Those are used to indicate\nwhat application was used to make the post, and some frontend will display that information.  If you don't know what I'm talking about, here is an example:   The syntax for application name, as of right now, is  lowercase-app-name/version , here's an example:  1\n2\n3\n4\n5\n6 <?php  // ...  // set the application name and version.  $config -> setApp ( 'coolapp/2.4' );    The same way, it's possible to set the community name:  1\n2\n3\n4\n5\n6 <?php  // ...  // set the community name.  $config -> setCommunity ( 'CoolApp' );",
            "title": "Application and Community Name."
        },
        {
            "location": "/01-configuration/#custom-steemconnect-servers",
            "text": "If for some reason, you are using a custom install of SteemConnect (a development install, for example), you may\nchange the base URL so all calls will use that domain.  1\n2\n3\n4\n5\n6 <?php  // ...  // customize the SteemConnect address.  $config -> setBaseUrl ( 'https://my-custom-steemconnect.com' );",
            "title": "Custom SteemConnect Servers."
        }
    ]
}