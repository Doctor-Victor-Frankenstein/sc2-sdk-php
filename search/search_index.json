{
    "docs": [
        {
            "location": "/",
            "text": "SteemConnect PHP SDK\n\u00b6\n\n\nThis is the documentation for \nSteemConnect\n \nPHP SDK\n, which is available at \nhttps://github.com/hernandev/sc2-sdk-php\n.\n\n\nHow to Read the Code Examples.\n\u00b6\n\n\nThis documentation was built with several code examples.\n\n\nFor code highlighting and easy to understand reasons, any PHP code will start with a \n<?php\n sign, and, on a given documentation page scope, when a given code example is a sequence of a previous example, it will be indicated by a \n// ...\n line, meaning that the current code is a continuation of the previous one.\n\n\nWhat this library is about?\n\u00b6\n\n\nThis library allows for interaction with \nSteemConnect\n (v2) on PHP projects.\n\n\nMeaning this library can achieve two things:\n\n\nHandle authentication flow:\n\u00b6\n\n\nAuthentication and Authorization flow though OAuth.\n\n\nBuild and broadcast operations:\n\u00b6\n\n\nBroadcast Steem blockchain operations through SteemConnect.\n\n\nWhat this library is NOT about:\n\u00b6\n\n\nThis library is intended to be a SteemConnect client for PHP only. Meaning no additional scopes were incorporated.\n\n\nParsing transactions and content display is not a part of this project.\n\n\nIf you are looking into displaying Steem blockchain posts, you may use another project of mine, \nLightRPC\n.",
            "title": "Home"
        },
        {
            "location": "/#steemconnect-php-sdk",
            "text": "This is the documentation for  SteemConnect   PHP SDK , which is available at  https://github.com/hernandev/sc2-sdk-php .",
            "title": "SteemConnect PHP SDK"
        },
        {
            "location": "/#how-to-read-the-code-examples",
            "text": "This documentation was built with several code examples.  For code highlighting and easy to understand reasons, any PHP code will start with a  <?php  sign, and, on a given documentation page scope, when a given code example is a sequence of a previous example, it will be indicated by a  // ...  line, meaning that the current code is a continuation of the previous one.",
            "title": "How to Read the Code Examples."
        },
        {
            "location": "/#what-this-library-is-about",
            "text": "This library allows for interaction with  SteemConnect  (v2) on PHP projects.  Meaning this library can achieve two things:",
            "title": "What this library is about?"
        },
        {
            "location": "/#handle-authentication-flow",
            "text": "Authentication and Authorization flow though OAuth.",
            "title": "Handle authentication flow:"
        },
        {
            "location": "/#build-and-broadcast-operations",
            "text": "Broadcast Steem blockchain operations through SteemConnect.",
            "title": "Build and broadcast operations:"
        },
        {
            "location": "/#what-this-library-is-not-about",
            "text": "This library is intended to be a SteemConnect client for PHP only. Meaning no additional scopes were incorporated.  Parsing transactions and content display is not a part of this project.  If you are looking into displaying Steem blockchain posts, you may use another project of mine,  LightRPC .",
            "title": "What this library is NOT about:"
        },
        {
            "location": "/01-configuration/",
            "text": "Configuration\n\u00b6\n\n\nBefore heading into SDK usage, we need to configure it, with credentials, return url and scopes.\n\n\nConfiguration Class.\n\u00b6\n\n\nTo start, we are going to create an instance of \nSteemConnect\\Config\\Config\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n<?php\n\n\n\nuse\n \nSteemConnect\\Config\\Config\n;\n\n\n\n// the client id and secret can be obtained on SteemConnect dashboard.\n\n\n$clientId\n \n=\n \n'your-steem-connect-client-id'\n;\n\n\n$clientSecret\n \n=\n \n'your-steem-connect-client-secret'\n;\n\n\n\n// create the configuration instance, using  the credentials.\n\n\n$config\n \n=\n \nnew\n \nConfig\n(\n$clientId\n,\n \n$clientSecret\n);\n\n\n\n\n\n\n\nReturn URL.\n\u00b6\n\n\nThe return URL is a parameter for the OAuth authorization flow. This URL will receive\nthe temporary code from SteemConnect after the user authorizes your application\nto act on the their behalf.\n\n\nTo configure the return URL, you just call the \nsetReturnUrl\n method on the Config object:\n\n\n1\n2\n3\n4\n5\n6\n<?php\n\n\n\n// ...\n\n\n\n// set the return URL on config.\n\n\n$config\n->\nsetReturnUrl\n(\n'https://your-steem-app/auth/callback'\n);\n\n\n\n\n\n\n\n\n\nNote\n\n\nThe URL being used on configuration must match the one configured on SteemConnect dashboard, otherwise the authorization flow will fail.\n\n\n\n\nScopes.\n\u00b6\n\n\nOther required configuration are which scopes your application requires.\n\n\nOn the OAuth flow, a scope could be translated to which permissions your users will grant you.\n\n\nThere are several scopes available. The list of scopes presented here may change with time, so, an up-to-date reference can fe found at \nSteemConnect wiki\n.\n\n\n\n\n\n\n\n\nScope\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlogin\n\n\nVerify Steem identity\n\n\n\n\n\n\noffline\n\n\nAllow long-lived token\n\n\n\n\n\n\nvote\n\n\nUpvote, downvote or unvote a post or comment\n\n\n\n\n\n\ncomment\n\n\nPublish or edit a post or a comment\n\n\n\n\n\n\ncomment_delete\n\n\nDelete a post or a comment\n\n\n\n\n\n\ncomment_options\n\n\nAdd options for a post or comment\n\n\n\n\n\n\ncustom_json\n\n\nFollow, unfollow, ignore, reblog or any custom_json operation\n\n\n\n\n\n\nclaim_reward_balance\n\n\nClaim reward for user\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nIf your application only needs to verify the user identity, the required scope \nlogin\n does not persist changes on the user account, so be sure to remember the user session to avoid the authorization dialog in every visit.\n\n\n\n\nTo configure the scopes your application will require, just call the \nsetScopes\n method on the config object, passing those scopes as an array:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n<?php\n\n\n\n// ...\n\n\n\n// set the required scopes on the configuration.\n\n\n$config\n->\nsetScopes\n([\n\n    \n'login'\n,\n\n    \n'vote'\n,\n\n    \n'comment'\n\n\n]);\n\n\n\n\n\n\n\nApplication and Community Name.\n\u00b6\n\n\nAn optional but interesting feature, is to configure both the application and community names. Those are used to indicate\nwhat application was used to make the post, and some frontend will display that information.\n\n\nIf you don't know what I'm talking about, here is an example:\n\n\n\n\nThe syntax for application name, as of right now, is \nlowercase-app-name/version\n, here's an example:\n\n\n1\n2\n3\n4\n5\n6\n<?php\n\n\n\n// ...\n\n\n\n// set the application name and version.\n\n\n$config\n->\nsetApp\n(\n'coolapp/2.4'\n);\n\n\n\n\n\n\n\nThe same way, it's possible to set the community name:\n\n\n1\n2\n3\n4\n5\n6\n<?php\n\n\n\n// ...\n\n\n\n// set the community name.\n\n\n$config\n->\nsetCommunity\n(\n'CoolApp'\n);\n\n\n\n\n\n\n\nCustom SteemConnect Servers.\n\u00b6\n\n\nIf for some reason, you are using a custom install of SteemConnect (a development install, for example), you may\nchange the base URL so all calls will use that domain.\n\n\n1\n2\n3\n4\n5\n6\n<?php\n\n\n\n// ...\n\n\n\n// customize the SteemConnect address.\n\n\n$config\n->\nsetBaseUrl\n(\n'https://my-custom-steemconnect.com'\n);",
            "title": "Configuration"
        },
        {
            "location": "/01-configuration/#configuration",
            "text": "Before heading into SDK usage, we need to configure it, with credentials, return url and scopes.",
            "title": "Configuration"
        },
        {
            "location": "/01-configuration/#configuration-class",
            "text": "To start, we are going to create an instance of  SteemConnect\\Config\\Config .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 <?php  use   SteemConnect\\Config\\Config ;  // the client id and secret can be obtained on SteemConnect dashboard.  $clientId   =   'your-steem-connect-client-id' ;  $clientSecret   =   'your-steem-connect-client-secret' ;  // create the configuration instance, using  the credentials.  $config   =   new   Config ( $clientId ,   $clientSecret );",
            "title": "Configuration Class."
        },
        {
            "location": "/01-configuration/#return-url",
            "text": "The return URL is a parameter for the OAuth authorization flow. This URL will receive\nthe temporary code from SteemConnect after the user authorizes your application\nto act on the their behalf.  To configure the return URL, you just call the  setReturnUrl  method on the Config object:  1\n2\n3\n4\n5\n6 <?php  // ...  // set the return URL on config.  $config -> setReturnUrl ( 'https://your-steem-app/auth/callback' );     Note  The URL being used on configuration must match the one configured on SteemConnect dashboard, otherwise the authorization flow will fail.",
            "title": "Return URL."
        },
        {
            "location": "/01-configuration/#scopes",
            "text": "Other required configuration are which scopes your application requires.  On the OAuth flow, a scope could be translated to which permissions your users will grant you.  There are several scopes available. The list of scopes presented here may change with time, so, an up-to-date reference can fe found at  SteemConnect wiki .     Scope  Description      login  Verify Steem identity    offline  Allow long-lived token    vote  Upvote, downvote or unvote a post or comment    comment  Publish or edit a post or a comment    comment_delete  Delete a post or a comment    comment_options  Add options for a post or comment    custom_json  Follow, unfollow, ignore, reblog or any custom_json operation    claim_reward_balance  Claim reward for user      Note  If your application only needs to verify the user identity, the required scope  login  does not persist changes on the user account, so be sure to remember the user session to avoid the authorization dialog in every visit.   To configure the scopes your application will require, just call the  setScopes  method on the config object, passing those scopes as an array:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 <?php  // ...  // set the required scopes on the configuration.  $config -> setScopes ([ \n     'login' , \n     'vote' , \n     'comment'  ]);",
            "title": "Scopes."
        },
        {
            "location": "/01-configuration/#application-and-community-name",
            "text": "An optional but interesting feature, is to configure both the application and community names. Those are used to indicate\nwhat application was used to make the post, and some frontend will display that information.  If you don't know what I'm talking about, here is an example:   The syntax for application name, as of right now, is  lowercase-app-name/version , here's an example:  1\n2\n3\n4\n5\n6 <?php  // ...  // set the application name and version.  $config -> setApp ( 'coolapp/2.4' );    The same way, it's possible to set the community name:  1\n2\n3\n4\n5\n6 <?php  // ...  // set the community name.  $config -> setCommunity ( 'CoolApp' );",
            "title": "Application and Community Name."
        },
        {
            "location": "/01-configuration/#custom-steemconnect-servers",
            "text": "If for some reason, you are using a custom install of SteemConnect (a development install, for example), you may\nchange the base URL so all calls will use that domain.  1\n2\n3\n4\n5\n6 <?php  // ...  // customize the SteemConnect address.  $config -> setBaseUrl ( 'https://my-custom-steemconnect.com' );",
            "title": "Custom SteemConnect Servers."
        },
        {
            "location": "/02-authentication/",
            "text": "Authentication\n\u00b6\n\n\nThis library wraps all authentication functionality built on \noauth2-sc2\n, if you are using the SDK, there's no need for separate authentication configuration, since all logic is wrapped on the SDK.\n\n\nBefore Authentication.\n\u00b6\n\n\nBefore we head into the actual authentication, we must have a SDK client instance.\n\n\nThe class that handle all SDK features is \nSteemConnect\\Client\\Client\n and for the examples on this section, we will create one instance and name the variable \n$sdk\n:\n\n\nAlso, we are assuming, you have the \n$config\n variable from the configuration section available.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n<?php\n\n\n\n// ...\n\n\n\n// alias the client.\n\n\nuse\n \nSteemConnect\\Client\\Client\n;\n\n\n\n// create a sdk client instance, using the\n\n\n// config instance we previously created.\n\n\n$sdk\n \n=\n \nnew\n \nClient\n(\n$config\n);\n\n\n\n\n\n\n\nThe OAuth Flow.\n\u00b6\n\n\nThose those who are not so familiar with OAuth, the basic flow is this:\n\n\n\n\nApplication redirects the user the the OAuth Provider, in this case, SteemConnect.\n\n\nThe user, grants, on the SteemConnect page, the permissions so your application can act on the user behalf.\n\n\nAfter the authorization, the provider, in this case SteemConnect, will redirect the user back to your application, with a temporary code that will be exchanged with an access token.\n\n\n\n\nAll of those steps are wrapped by the SDK.\n\n\nThis means, that you only need to do two SDK calls in order to authenticate and get authorization from users.\n\n\nRedirecting To SteemConnect.\n\u00b6\n\n\nWhen the users access your application, you will need to do a redirect to SteemConnect.\n\n\nNow, using the SDK we can build the URL used to redirect the users to:\n\n\n1\n2\n3\n4\n5\n6\n<?php\n\n\n\n// ...\n\n\n\n// get the authorization URL.\n\n\n$authorizationURL\n \n=\n \n$sdk\n->\nauth\n()\n->\ngetAuthorizationUrl\n();\n\n\n\n\n\n\n\nNow, you can actually redirect the user to that URL. Be free to use any method you want.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n<?php\n\n\n\n// ...\n\n\n\n\n// using pure PHP:\n\n\nheader\n(\n\"Location: \n{\n$authorizationURL\n}\n\"\n);\n\n\n\n\n// using Laravel inside a controller:\n\n\nreturn\n \nredirect\n(\n$authorizationURL\n);\n\n\n\n\n\n\n\nBy doing that for the first time, your users will be faced with the following authorization page:\n\n\n\n\n\n\nNote\n\n\nNotice on this example, the application requesting permission is \nBusy.org\n. Both the logo and application name will change on your own applications, and can be customized through SteemConnect dashboard.\n\n\n\n\n\n\nNote\n\n\nAlso, the scopes required may change by your own requirements, be sure to read all and request only the ones you actually need. Avoid having more powers over your users accounts than you actually need.\n\n\n\n\nHandling the Return.\n\u00b6\n\n\nIn some places referred to as \ncallback\n, the return from an authorization flow is just the practice of exchanging the temporary grant code\nwith a real access token, that is required to operate your users accounts after the authorization.\n\n\nThe SDK also abstracts all that parsing, so you only need to do one call at callback phase.\n\n\n1\n2\n3\n4\n5\n6\n7\n<?php\n\n\n\n// ...\n\n\n\n\n// exchanging the authorization code by a access token.\n\n\n$token\n \n=\n \n$sdk\n->\nauth\n()\n->\nparseReturn\n();\n\n\n\n\n\n\n\nThe token returned on the callback / return page is an instance of \nSteemConnect\\Auth\\Token\n, which we will discuss on the next section.\n\n\nStoring and Using Access Tokens.\n\u00b6\n\n\nEach access token is specific to a given user. Meaning when you need to the access token every time you need to broadcast an operation\nto the Steem blockchain.\n\n\nSince the tokens as an instance of \nSteemConnect\\Auth\\Token\n, it's easy to serialize and factory it's instance:\n\n\nSerialization for Storage:\n\u00b6\n\n\nWhen you have a \nToken\n instance, and you need to store it, you can transform the token into a JSON string by doing:\n\n\n1\n2\n3\n4\n5\n6\n<?php\n\n\n\n// ...\n\n\n\n// create a json representation of the token for storage.\n\n\n$tokenJson\n \n=\n \njson_encode\n(\n$token\n);\n\n\n\n\n\n\n\nParsing Stored Tokens.\n\u00b6\n\n\nNow, on a late time, when a given user returns to your application, you can just factory the token instance back:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n<?php\n\n\n\n// ...\n\n\n\nuse\n \nSteemConnect\\Auth\\Token\n;\n\n\n\n// the fromJsonString method will decode \n\n\n// the token json string into a token instance.\n\n\n$token\n \n=\n \nToken\n::\nfromJsonString\n(\n$tokenJson\n);\n\n\n\n\n\n\n\nUsing Tokens.\n\u00b6\n\n\nSince all operations needs to be authenticated, the SDK requires a \nToken\n instance to work.\n\n\nTo configure the access token on the SDK, all you need to do is:\n\n\n1\n2\n3\n4\n5\n6\n7\n<?php\n\n\n\n// ...\n\n\n\n// set the token instance on the SDK, \n\n\n// so operations can be authenticated.\n\n\n$sdk\n->\nsetToken\n(\n$token\n);",
            "title": "Authentication"
        },
        {
            "location": "/02-authentication/#authentication",
            "text": "This library wraps all authentication functionality built on  oauth2-sc2 , if you are using the SDK, there's no need for separate authentication configuration, since all logic is wrapped on the SDK.",
            "title": "Authentication"
        },
        {
            "location": "/02-authentication/#before-authentication",
            "text": "Before we head into the actual authentication, we must have a SDK client instance.  The class that handle all SDK features is  SteemConnect\\Client\\Client  and for the examples on this section, we will create one instance and name the variable  $sdk :  Also, we are assuming, you have the  $config  variable from the configuration section available.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 <?php  // ...  // alias the client.  use   SteemConnect\\Client\\Client ;  // create a sdk client instance, using the  // config instance we previously created.  $sdk   =   new   Client ( $config );",
            "title": "Before Authentication."
        },
        {
            "location": "/02-authentication/#the-oauth-flow",
            "text": "Those those who are not so familiar with OAuth, the basic flow is this:   Application redirects the user the the OAuth Provider, in this case, SteemConnect.  The user, grants, on the SteemConnect page, the permissions so your application can act on the user behalf.  After the authorization, the provider, in this case SteemConnect, will redirect the user back to your application, with a temporary code that will be exchanged with an access token.   All of those steps are wrapped by the SDK.  This means, that you only need to do two SDK calls in order to authenticate and get authorization from users.",
            "title": "The OAuth Flow."
        },
        {
            "location": "/02-authentication/#redirecting-to-steemconnect",
            "text": "When the users access your application, you will need to do a redirect to SteemConnect.  Now, using the SDK we can build the URL used to redirect the users to:  1\n2\n3\n4\n5\n6 <?php  // ...  // get the authorization URL.  $authorizationURL   =   $sdk -> auth () -> getAuthorizationUrl ();    Now, you can actually redirect the user to that URL. Be free to use any method you want.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 <?php  // ...  // using pure PHP:  header ( \"Location:  { $authorizationURL } \" );  // using Laravel inside a controller:  return   redirect ( $authorizationURL );    By doing that for the first time, your users will be faced with the following authorization page:    Note  Notice on this example, the application requesting permission is  Busy.org . Both the logo and application name will change on your own applications, and can be customized through SteemConnect dashboard.    Note  Also, the scopes required may change by your own requirements, be sure to read all and request only the ones you actually need. Avoid having more powers over your users accounts than you actually need.",
            "title": "Redirecting To SteemConnect."
        },
        {
            "location": "/02-authentication/#handling-the-return",
            "text": "In some places referred to as  callback , the return from an authorization flow is just the practice of exchanging the temporary grant code\nwith a real access token, that is required to operate your users accounts after the authorization.  The SDK also abstracts all that parsing, so you only need to do one call at callback phase.  1\n2\n3\n4\n5\n6\n7 <?php  // ...  // exchanging the authorization code by a access token.  $token   =   $sdk -> auth () -> parseReturn ();    The token returned on the callback / return page is an instance of  SteemConnect\\Auth\\Token , which we will discuss on the next section.",
            "title": "Handling the Return."
        },
        {
            "location": "/02-authentication/#storing-and-using-access-tokens",
            "text": "Each access token is specific to a given user. Meaning when you need to the access token every time you need to broadcast an operation\nto the Steem blockchain.  Since the tokens as an instance of  SteemConnect\\Auth\\Token , it's easy to serialize and factory it's instance:",
            "title": "Storing and Using Access Tokens."
        },
        {
            "location": "/02-authentication/#serialization-for-storage",
            "text": "When you have a  Token  instance, and you need to store it, you can transform the token into a JSON string by doing:  1\n2\n3\n4\n5\n6 <?php  // ...  // create a json representation of the token for storage.  $tokenJson   =   json_encode ( $token );",
            "title": "Serialization for Storage:"
        },
        {
            "location": "/02-authentication/#parsing-stored-tokens",
            "text": "Now, on a late time, when a given user returns to your application, you can just factory the token instance back:  1\n2\n3\n4\n5\n6\n7\n8\n9 <?php  // ...  use   SteemConnect\\Auth\\Token ;  // the fromJsonString method will decode   // the token json string into a token instance.  $token   =   Token :: fromJsonString ( $tokenJson );",
            "title": "Parsing Stored Tokens."
        },
        {
            "location": "/02-authentication/#using-tokens",
            "text": "Since all operations needs to be authenticated, the SDK requires a  Token  instance to work.  To configure the access token on the SDK, all you need to do is:  1\n2\n3\n4\n5\n6\n7 <?php  // ...  // set the token instance on the SDK,   // so operations can be authenticated.  $sdk -> setToken ( $token );",
            "title": "Using Tokens."
        },
        {
            "location": "/03-operations/",
            "text": "Broadcasting Operations\n\u00b6\n\n\nConsidering the user already authorized your application, and you have the SDK client instance configured with the\nuser's access token, it's now time to broadcast operations.\n\n\nBroad-what, Ope-who?\n\u00b6\n\n\nIf you are lost on those terms, just understand the basics:\n\n\nAn \noperation\n, is a given instruction transmitted to the Seem blockchain. The instruction could\nbe an upvote, downvote, comment, etc.\n\n\nBroadcast\n is just a common name used to reference the act of signing and including the operation(s)\ninto the Steem blockchain.\n\n\nSometimes, a single operation will be broadcast, and, in other cases, like adding beneficiaries to a given\n comment, more than one operation will be broadcast at the same time.\n\n\nFinally, we have the \ntransaction\n concept. A transaction is the result of a successful broadcast of\na given number of operations.\n\n\nMeaning, a transaction is a record within a Steem blockchain block, and a transaction contains all the\noperations that were broadcast.\n\n\nA quick example.\n\u00b6\n\n\nBefore we head on a reference of all types of operations available, We need to understand\nthe SDK flow for handling SteemConnect responses.\n\n\nHere is a quick example, where we will upvote a given post:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n<?php\n\n\n\n// ...\n\n\n\n// classes used on the example:\n\n\n\nuse\n \nSteemConnect\\Operations\\Vote\n;\n\n\n\n// lets create a upvote operation:\n\n\n$upvote\n \n=\n \nnew\n \nVote\n();\n\n\n// set who is the user voting.\n\n\n$upvote\n->\nvoter\n(\n'hernandev'\n);\n\n\n// let's vote on:\n\n\n// https://busy.org/@utopian-io/utopian-io-reborn-smarter-simpler-better\n\n\n$upvote\n->\non\n(\n'utopian-io'\n,\n \n'utopian-io-reborn-smarter-simpler-better'\n);\n\n\n// now, set the upvote at 50%\n\n\n$upvote\n->\npercent\n(\n50\n);\n\n\n\n// broadcast the operation to Steem through SteemConnect.\n\n\n$response\n \n=\n \n$sdk\n->\nbroadcast\n(\n$operation\n)\n\n\n\n// get the transaction from the broadcast response.\n\n\n$transaction\n \n=\n \n$response\n->\ngetTransaction\n();\n\n\n\n\n\n\n\nThe SDK api is really simple to understand, but, let's break down the concepts:\n\n\nFirst, on that example, we created a \nVote\n operation instance, and populated that vote\nwith the parameters we wanted.\n\n\nIt's important to notice that, given Steem blockchain data structures, we need to set who is the account\nresponsible for the operation, that's why the \nvoter\n method was called.\n\n\n\n\nWarning\n\n\nNotice that, on the SDK calls, the \n@\n should not be used, only the account names. On the example,\nthe user \n@hernandev\n is voting on a post by \n@utopian-io\n, both accounts must\nbe referenced as \nhernandev\n and \nutopian-io\n only, without the \n@\n. \n\n\n\n\nNow, to what matters:\n\n\nThe \n$response\n variable, returned from the \nbroadcast()\n method on the SDK, is an instance of \n\nSteemConnect\\Client\\Response\n, this class is used to wrap the HTTP response from\nSteemConnect.\n\n\nIn cases of errors, the broadcast method will not return a \nResponse\n instance, instead, it will throw an exception.\n\n\nOn success cases, the transaction, that is the result of the broadcast, can be accessed though the \ngetTransaction()\n\nmethod on the \nResponse\n instance.\n\n\nThe transaction, from that method, is an instance of \nSteemConnect\\Transactions\\Transaction\n, and an be converted to an\narray, for storage purposes, or it's data can also be accessed using the Transaction getters. For a full list of the\navailable methods, consult the\n\nsource code directly here\n.\n\n\nAvailable Operations.\n\u00b6\n\n\nHere we list valid operation examples, that can be adapted on your applications. Notice that each operation has it's\ncorresponding required scope, which the user must have previously allowed, on the authorization flow.\n\n\nVoting.\n\u00b6\n\n\nBoth upvote and downvote are the same operation, the difference is the percent given on the vote. In other words, a vote\nweight can vary between -100% and 100%.\n\n\nOn the numerous Steem frontend applications, the downvote is displayed as \nflagged posts\n, which means the weight itself\nis rarely shown.\n\n\nFor this library, the weight of a given vote can be passed as argument using any percent notation:\n\n\n\n\n\n\nInteger Notation\n\n\n100\n represents \n100%\n, \n50\n represents \n50%\n, etc.\n\n\n\n\n\n\nDefault Notation\n\n\nUsed by most Steem clients, and the internal format, where a \n100%\n vote is represented by the number \n10000\n.\n\n\n\n\n\n\nUpvote Example:\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<?php\n\n\n\n// ...\n\n\n\n// alias classes:\n\n\nuse\n \nSteemConnect\\Operations\\Vote\n;\n\n\n\n// lets create a upvote operation:\n\n\n$upvote\n \n=\n \nnew\n \nVote\n();\n\n\n// set who is the user voting.\n\n\n$upvote\n->\nvoter\n(\n'hernandev'\n);\n\n\n// let's vote on:\n\n\n// https://busy.org/@utopian-io/utopian-io-reborn-smarter-simpler-better\n\n\n$upvote\n->\non\n(\n'utopian-io'\n,\n \n'utopian-io-reborn-smarter-simpler-better'\n);\n\n\n// now, set the upvote at 90%\n\n\n$upvote\n->\npercent\n(\n90\n);\n\n\n\n// broadcast the operation to Steem through SteemConnect.\n\n\n$response\n \n=\n \n$sdk\n->\nbroadcast\n(\n$upvote\n);\n\n\n\n\n\n\n\nDownvote Example:\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<?php\n\n\n\n// ...\n\n\n\n// alias classes:\n\n\nuse\n \nSteemConnect\\Operations\\Vote\n;\n\n\n\n// lets create a upvote operation:\n\n\n$upvote\n \n=\n \nnew\n \nVote\n();\n\n\n// set who is the user voting.\n\n\n$upvote\n->\nvoter\n(\n'hernandev'\n);\n\n\n// let's vote on:\n\n\n// https://busy.org/@utopian-io/utopian-io-reborn-smarter-simpler-better\n\n\n$upvote\n->\non\n(\n'utopian-io'\n,\n \n'utopian-io-reborn-smarter-simpler-better'\n);\n\n\n// now, set the upvote at -100%\n\n\n$upvote\n->\npercent\n(\n-\n100\n);\n\n\n\n// broadcast the operation to Steem through SteemConnect.\n\n\n$response\n \n=\n \n$sdk\n->\nbroadcast\n(\n$upvote\n);\n\n\n\n\n\n\n\nIf for some reason, you want to change the vote, all you need is to broadcast the new vote, Steem will consider the\nlast vote as valid and the previous ones as invalid.\n\n\nFollow & UnFollow.\n\u00b6\n\n\nFollow and Unfollow, are also, the same operation, meaning that the difference is only a internal flag \ninside it called \nwhat\n.\n\n\nThe what parameter of a follow operation is an array, and the value \n\"blog\"\n indicated the follow status.\n\n\nFollow Example:\n\u00b6\n\n\nOn this example, the user \n@hernandev\n starts following the user \n@utopian-io\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n<?php\n\n\n\n// ...\n\n\n\n// alias classes:\n\n\nuse\n \nSteemConnect\\Operations\\Follow\n;\n\n\n\n// create the operation:\n\n\n$follow\n \n=\n \nnew\n \nFollow\n();\n\n\n// set the follower.\n\n\n$follow\n->\nfollower\n(\n'hernandev'\n);\n\n\n// set who to follow.\n\n\n$follow\n->\nfollow\n(\n'utopian-io'\n)\n\n\n\n// broadcast the operation to Steem through SteemConnect.\n\n\n$response\n \n=\n \n$sdk\n->\nbroadcast\n(\n$follow\n);\n\n\n\n\n\n\n\nUnFollow Example:\n\u00b6\n\n\nOn this example, the user \n@hernandev\n stops following the user \n@utopian-io\n.\n\n\nThis means we are reverting the previous follow operation.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n<?php\n\n\n\n// ...\n\n\n\n// alias classes:\n\n\nuse\n \nSteemConnect\\Operations\\Follow\n;\n\n\n\n// create the operation:\n\n\n$follow\n \n=\n \nnew\n \nFollow\n();\n\n\n// set the follower.\n\n\n$follow\n->\nfollower\n(\n'hernandev'\n);\n\n\n// let's unfollow.\n\n\n$follow\n->\nunfollow\n(\n'utopian-io'\n)\n\n\n\n// broadcast the operation to Steem through SteemConnect.\n\n\n$response\n \n=\n \n$sdk\n->\nbroadcast\n(\n$follow\n);\n\n\n\n\n\n\n\nReblog.\n\u00b6\n\n\nReblog is a simple operation, all you need to do is:\n\n\nOn the example, the user \n@hernandev\n is reblogging the post \n\nhttps://steemit.com/@utopian-io/utopian-io-reborn-smarter-simpler-better\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n<?php\n\n\n\n// ...\n\n\n\n// alias classes:\n\n\nuse\n \nSteemConnect\\Operations\\Reblog\n;\n\n\n\n// create the operation:\n\n\n$reblog\n \n=\n \nnew\n \nReblog\n();\n\n\n// set the user that will reblog.\n\n\n$reblog\n->\naccount\n(\n'hernandev'\n);\n\n\n// reblog a given post.\n\n\n$reblog\n->\nreblog\n(\n'utopian-io'\n,\n \n'utopian-io-reborn-smarter-simpler-better'\n);\n\n\n\n// broadcast the operation to Steem through SteemConnect.\n\n\n$response\n \n=\n \n$sdk\n->\nbroadcast\n(\n$reblog\n);\n\n\n\n\n\n\n\nPost & Comment.\n\u00b6\n\n\nOn the Steem blockchain, a post is actually a comment. It means, that a Post is just a comment, without a parent.\n\n\nBut, since there is no parent on a post, we need to set the parent permlink, that one will be used as the category\nfor the post.\n\n\nThe example will make it a little bit easier to understand:\n\n\nPost Example:\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n<?php\n\n\n\n// ...\n\n\n\n// alias classes:\n\n\nuse\n \nSteemConnect\\Operations\\Comment\n;\n\n\n\n// create the operation:\n\n\n$post\n \n=\n \nnew\n \nComment\n();\n\n\n// set the author of the post.\n\n\n$post\n->\nauthor\n(\n'hernandev'\n);\n\n\n$post\n->\ncategory\n(\n'introduceyourself'\n);\n\n\n// set the post title.\n\n\n$post\n->\ntitle\n(\n'Hello, this is Diego, but you can callme @hernandev'\n);\n\n\n// set the post body.\n\n\n$post\n->\nbody\n(\n'You may insert the post content here, markdown is advised'\n);\n\n\n// optionally, you may set tags on the post:\n\n\n$post\n->\ntags\n([\n'life'\n,\n \n'steem'\n,\n \n'steemdev'\n]);\n\n\n\n// broadcast the operation to Steem through SteemConnect.\n\n\n$response\n \n=\n \n$sdk\n->\nbroadcast\n(\n$post\n);\n\n\n\n\n\n\n\nWait, what about the post URL?\n\n\nThe post URL is automatically extract from the title, using an internal slug function.\n\n\nOn the example, the title of the post was:\n\n\nHello, this is Diego, but you can callme @hernandev\n\n\nThe SDK will translate the title into a URL friendly slug:\n\n\nhello-this-is-diego-but-you-can-callme-at-hernandev\n\n\nBut, if you want to customize the URL (which on Steem, is called \npermlink\n), you can do that by calling:\n\n\n1\n2\n3\n4\n5\n<?php\n\n\n\n// ...\n\n\n\n$post\n->\npermlink\n(\n'this-is-a-custom-permlink-url-for-the-post'\n);\n\n\n\n\n\n\n\nThe permlink does not need to match the title, the only rule here is that one author may not use the same permlink twice,\nsince that's the unique identifier for a post.\n\n\nComment / Reply Example:\n\u00b6\n\n\nTo comment or reply on a given post, is also very simple:\n\n\nOn the example, we are going to reply to the post we just created on the previous example.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n<?php\n\n\n\n// ...\n\n\n\n// alias classes:\n\n\nuse\n \nSteemConnect\\Operations\\Comment\n;\n\n\n\n// create the operation:\n\n\n$comment\n \n=\n \nnew\n \nComment\n();\n\n\n// set the author of the post.\n\n\n$comment\n->\nauthor\n(\n'hernandev'\n);\n\n\n// set the parent post, you are replying to.\n\n\n$comment\n->\nreply\n(\n'hernandev'\n,\n \n'hello-this-is-diego-but-you-can-callme-at-hernandev'\n);\n\n\n// set the post body.\n\n\n$post\n->\nbody\n(\n'You may insert the post content here, markdown is advised'\n);\n\n\n// optionally, you may set tags on the post:\n\n\n$post\n->\ntags\n([\n'life'\n,\n \n'steem'\n,\n \n'steemdev'\n]);\n\n\n\n// broadcast the operation to Steem through SteemConnect.\n\n\n$response\n \n=\n \n$sdk\n->\nbroadcast\n(\n$post\n);\n\n\n\n\n\n\n\nJust as the post, a reply will have the permlink automatically filled from the body content, if you want to customize\nthe permlink, you can do the same you did for posts, by calling the \npermlink()\n method.\n\n\nComment Options.\n\u00b6\n\n\nOne important thing about comments, is that there are special options, like beneficiares, 50% SBD or 100% SP, etc.\n\n\nThose special options are not a part of the comment operation itself. Instead those options must be set on a special\noperation called \ncomment_options\n.\n\n\n\n\nWarning\n\n\nWhile is not required for a \ncomment\n to have a \ncomment_options\n operation, when they do, both operations \nMUST\n\nbe broadcast at the same time, since they must be part of the same transaction.\n\n\n\n\nComment With Comment Options Example:\n\u00b6\n\n\nHere is an example, that creates a post, with options and broadcast the operations at the same time:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n<?php\n\n\n\n// ...\n\n\n\n// alias classes:\n\n\nuse\n \nSteemConnect\\Operations\\Comment\n;\n\n\nuse\n \nSteemConnect\\Operations\\CommentOptions\n;\n\n\n\n// create the operation:\n\n\n$post\n \n=\n \nnew\n \nComment\n();\n\n\n// set the author of the post.\n\n\n$post\n->\nauthor\n(\n'hernandev'\n);\n\n\n// set the category.\n\n\n$post\n->\ncategory\n(\n'testing'\n);\n\n\n// set the parent post, you are replying to.\n\n\n$post\n->\ntitle\n(\n'This is an example comment'\n);\n\n\n// set the post body.\n\n\n$post\n->\nbody\n(\n'Hello dear Steemians...'\n);\n\n\n// optionally, you may set tags on the post:\n\n\n$post\n->\ntags\n([\n'life'\n,\n \n'steem'\n,\n \n'steemdev'\n]);\n\n\n\n\n// create the comment options operation:\n\n\n$options\n \n=\n \nnew\n \nCommentOptions\n();\n\n\n// now, we set the post that will own the options.\n\n\n// this is where we link the two operations.\n\n\n$options\n->\nof\n(\n$post\n);\n\n\n// you may disable votes.\n\n\n$options\n->\nallowVotes\n(\nfalse\n);\n\n\n// you may disable curation rewards.\n\n\n$options\n->\nallowCurationRewards\n(\nfalse\n);\n\n\n// don't wanna earn form your post, customize the max payout value.\n\n\n$options\n->\nmaxAcceptedPayout\n(\n0\n);\n\n\n// set you only want 50% of the 50% SBD payout.\n\n\n// for a 100% SP payout, set this value as 0 (zero).\n\n\n$options\n->\npercentSteemDollars\n(\n5000\n);\n\n\n\n\n// now, broadcast both operations at once.\n\n\n$response\n \n=\n \n$sdk\n->\nbroadcast\n(\n$post\n,\n \n$options\n);",
            "title": "Operations"
        },
        {
            "location": "/03-operations/#broadcasting-operations",
            "text": "Considering the user already authorized your application, and you have the SDK client instance configured with the\nuser's access token, it's now time to broadcast operations.",
            "title": "Broadcasting Operations"
        },
        {
            "location": "/03-operations/#broad-what-ope-who",
            "text": "If you are lost on those terms, just understand the basics:  An  operation , is a given instruction transmitted to the Seem blockchain. The instruction could\nbe an upvote, downvote, comment, etc.  Broadcast  is just a common name used to reference the act of signing and including the operation(s)\ninto the Steem blockchain.  Sometimes, a single operation will be broadcast, and, in other cases, like adding beneficiaries to a given\n comment, more than one operation will be broadcast at the same time.  Finally, we have the  transaction  concept. A transaction is the result of a successful broadcast of\na given number of operations.  Meaning, a transaction is a record within a Steem blockchain block, and a transaction contains all the\noperations that were broadcast.",
            "title": "Broad-what, Ope-who?"
        },
        {
            "location": "/03-operations/#a-quick-example",
            "text": "Before we head on a reference of all types of operations available, We need to understand\nthe SDK flow for handling SteemConnect responses.  Here is a quick example, where we will upvote a given post:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 <?php  // ...  // classes used on the example:  use   SteemConnect\\Operations\\Vote ;  // lets create a upvote operation:  $upvote   =   new   Vote ();  // set who is the user voting.  $upvote -> voter ( 'hernandev' );  // let's vote on:  // https://busy.org/@utopian-io/utopian-io-reborn-smarter-simpler-better  $upvote -> on ( 'utopian-io' ,   'utopian-io-reborn-smarter-simpler-better' );  // now, set the upvote at 50%  $upvote -> percent ( 50 );  // broadcast the operation to Steem through SteemConnect.  $response   =   $sdk -> broadcast ( $operation )  // get the transaction from the broadcast response.  $transaction   =   $response -> getTransaction ();    The SDK api is really simple to understand, but, let's break down the concepts:  First, on that example, we created a  Vote  operation instance, and populated that vote\nwith the parameters we wanted.  It's important to notice that, given Steem blockchain data structures, we need to set who is the account\nresponsible for the operation, that's why the  voter  method was called.   Warning  Notice that, on the SDK calls, the  @  should not be used, only the account names. On the example,\nthe user  @hernandev  is voting on a post by  @utopian-io , both accounts must\nbe referenced as  hernandev  and  utopian-io  only, without the  @ .    Now, to what matters:  The  $response  variable, returned from the  broadcast()  method on the SDK, is an instance of  SteemConnect\\Client\\Response , this class is used to wrap the HTTP response from\nSteemConnect.  In cases of errors, the broadcast method will not return a  Response  instance, instead, it will throw an exception.  On success cases, the transaction, that is the result of the broadcast, can be accessed though the  getTransaction() \nmethod on the  Response  instance.  The transaction, from that method, is an instance of  SteemConnect\\Transactions\\Transaction , and an be converted to an\narray, for storage purposes, or it's data can also be accessed using the Transaction getters. For a full list of the\navailable methods, consult the source code directly here .",
            "title": "A quick example."
        },
        {
            "location": "/03-operations/#available-operations",
            "text": "Here we list valid operation examples, that can be adapted on your applications. Notice that each operation has it's\ncorresponding required scope, which the user must have previously allowed, on the authorization flow.",
            "title": "Available Operations."
        },
        {
            "location": "/03-operations/#voting",
            "text": "Both upvote and downvote are the same operation, the difference is the percent given on the vote. In other words, a vote\nweight can vary between -100% and 100%.  On the numerous Steem frontend applications, the downvote is displayed as  flagged posts , which means the weight itself\nis rarely shown.  For this library, the weight of a given vote can be passed as argument using any percent notation:    Integer Notation  100  represents  100% ,  50  represents  50% , etc.    Default Notation  Used by most Steem clients, and the internal format, where a  100%  vote is represented by the number  10000 .",
            "title": "Voting."
        },
        {
            "location": "/03-operations/#upvote-example",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 <?php  // ...  // alias classes:  use   SteemConnect\\Operations\\Vote ;  // lets create a upvote operation:  $upvote   =   new   Vote ();  // set who is the user voting.  $upvote -> voter ( 'hernandev' );  // let's vote on:  // https://busy.org/@utopian-io/utopian-io-reborn-smarter-simpler-better  $upvote -> on ( 'utopian-io' ,   'utopian-io-reborn-smarter-simpler-better' );  // now, set the upvote at 90%  $upvote -> percent ( 90 );  // broadcast the operation to Steem through SteemConnect.  $response   =   $sdk -> broadcast ( $upvote );",
            "title": "Upvote Example:"
        },
        {
            "location": "/03-operations/#downvote-example",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 <?php  // ...  // alias classes:  use   SteemConnect\\Operations\\Vote ;  // lets create a upvote operation:  $upvote   =   new   Vote ();  // set who is the user voting.  $upvote -> voter ( 'hernandev' );  // let's vote on:  // https://busy.org/@utopian-io/utopian-io-reborn-smarter-simpler-better  $upvote -> on ( 'utopian-io' ,   'utopian-io-reborn-smarter-simpler-better' );  // now, set the upvote at -100%  $upvote -> percent ( - 100 );  // broadcast the operation to Steem through SteemConnect.  $response   =   $sdk -> broadcast ( $upvote );    If for some reason, you want to change the vote, all you need is to broadcast the new vote, Steem will consider the\nlast vote as valid and the previous ones as invalid.",
            "title": "Downvote Example:"
        },
        {
            "location": "/03-operations/#follow-unfollow",
            "text": "Follow and Unfollow, are also, the same operation, meaning that the difference is only a internal flag \ninside it called  what .  The what parameter of a follow operation is an array, and the value  \"blog\"  indicated the follow status.",
            "title": "Follow &amp; UnFollow."
        },
        {
            "location": "/03-operations/#follow-example",
            "text": "On this example, the user  @hernandev  starts following the user  @utopian-io .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 <?php  // ...  // alias classes:  use   SteemConnect\\Operations\\Follow ;  // create the operation:  $follow   =   new   Follow ();  // set the follower.  $follow -> follower ( 'hernandev' );  // set who to follow.  $follow -> follow ( 'utopian-io' )  // broadcast the operation to Steem through SteemConnect.  $response   =   $sdk -> broadcast ( $follow );",
            "title": "Follow Example:"
        },
        {
            "location": "/03-operations/#unfollow-example",
            "text": "On this example, the user  @hernandev  stops following the user  @utopian-io .  This means we are reverting the previous follow operation.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 <?php  // ...  // alias classes:  use   SteemConnect\\Operations\\Follow ;  // create the operation:  $follow   =   new   Follow ();  // set the follower.  $follow -> follower ( 'hernandev' );  // let's unfollow.  $follow -> unfollow ( 'utopian-io' )  // broadcast the operation to Steem through SteemConnect.  $response   =   $sdk -> broadcast ( $follow );",
            "title": "UnFollow Example:"
        },
        {
            "location": "/03-operations/#reblog",
            "text": "Reblog is a simple operation, all you need to do is:  On the example, the user  @hernandev  is reblogging the post  https://steemit.com/@utopian-io/utopian-io-reborn-smarter-simpler-better   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 <?php  // ...  // alias classes:  use   SteemConnect\\Operations\\Reblog ;  // create the operation:  $reblog   =   new   Reblog ();  // set the user that will reblog.  $reblog -> account ( 'hernandev' );  // reblog a given post.  $reblog -> reblog ( 'utopian-io' ,   'utopian-io-reborn-smarter-simpler-better' );  // broadcast the operation to Steem through SteemConnect.  $response   =   $sdk -> broadcast ( $reblog );",
            "title": "Reblog."
        },
        {
            "location": "/03-operations/#post-comment",
            "text": "On the Steem blockchain, a post is actually a comment. It means, that a Post is just a comment, without a parent.  But, since there is no parent on a post, we need to set the parent permlink, that one will be used as the category\nfor the post.  The example will make it a little bit easier to understand:",
            "title": "Post &amp; Comment."
        },
        {
            "location": "/03-operations/#post-example",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 <?php  // ...  // alias classes:  use   SteemConnect\\Operations\\Comment ;  // create the operation:  $post   =   new   Comment ();  // set the author of the post.  $post -> author ( 'hernandev' );  $post -> category ( 'introduceyourself' );  // set the post title.  $post -> title ( 'Hello, this is Diego, but you can callme @hernandev' );  // set the post body.  $post -> body ( 'You may insert the post content here, markdown is advised' );  // optionally, you may set tags on the post:  $post -> tags ([ 'life' ,   'steem' ,   'steemdev' ]);  // broadcast the operation to Steem through SteemConnect.  $response   =   $sdk -> broadcast ( $post );    Wait, what about the post URL?  The post URL is automatically extract from the title, using an internal slug function.  On the example, the title of the post was:  Hello, this is Diego, but you can callme @hernandev  The SDK will translate the title into a URL friendly slug:  hello-this-is-diego-but-you-can-callme-at-hernandev  But, if you want to customize the URL (which on Steem, is called  permlink ), you can do that by calling:  1\n2\n3\n4\n5 <?php  // ...  $post -> permlink ( 'this-is-a-custom-permlink-url-for-the-post' );    The permlink does not need to match the title, the only rule here is that one author may not use the same permlink twice,\nsince that's the unique identifier for a post.",
            "title": "Post Example:"
        },
        {
            "location": "/03-operations/#comment-reply-example",
            "text": "To comment or reply on a given post, is also very simple:  On the example, we are going to reply to the post we just created on the previous example.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 <?php  // ...  // alias classes:  use   SteemConnect\\Operations\\Comment ;  // create the operation:  $comment   =   new   Comment ();  // set the author of the post.  $comment -> author ( 'hernandev' );  // set the parent post, you are replying to.  $comment -> reply ( 'hernandev' ,   'hello-this-is-diego-but-you-can-callme-at-hernandev' );  // set the post body.  $post -> body ( 'You may insert the post content here, markdown is advised' );  // optionally, you may set tags on the post:  $post -> tags ([ 'life' ,   'steem' ,   'steemdev' ]);  // broadcast the operation to Steem through SteemConnect.  $response   =   $sdk -> broadcast ( $post );    Just as the post, a reply will have the permlink automatically filled from the body content, if you want to customize\nthe permlink, you can do the same you did for posts, by calling the  permlink()  method.",
            "title": "Comment / Reply Example:"
        },
        {
            "location": "/03-operations/#comment-options",
            "text": "One important thing about comments, is that there are special options, like beneficiares, 50% SBD or 100% SP, etc.  Those special options are not a part of the comment operation itself. Instead those options must be set on a special\noperation called  comment_options .   Warning  While is not required for a  comment  to have a  comment_options  operation, when they do, both operations  MUST \nbe broadcast at the same time, since they must be part of the same transaction.",
            "title": "Comment Options."
        },
        {
            "location": "/03-operations/#comment-with-comment-options-example",
            "text": "Here is an example, that creates a post, with options and broadcast the operations at the same time:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40 <?php  // ...  // alias classes:  use   SteemConnect\\Operations\\Comment ;  use   SteemConnect\\Operations\\CommentOptions ;  // create the operation:  $post   =   new   Comment ();  // set the author of the post.  $post -> author ( 'hernandev' );  // set the category.  $post -> category ( 'testing' );  // set the parent post, you are replying to.  $post -> title ( 'This is an example comment' );  // set the post body.  $post -> body ( 'Hello dear Steemians...' );  // optionally, you may set tags on the post:  $post -> tags ([ 'life' ,   'steem' ,   'steemdev' ]);  // create the comment options operation:  $options   =   new   CommentOptions ();  // now, we set the post that will own the options.  // this is where we link the two operations.  $options -> of ( $post );  // you may disable votes.  $options -> allowVotes ( false );  // you may disable curation rewards.  $options -> allowCurationRewards ( false );  // don't wanna earn form your post, customize the max payout value.  $options -> maxAcceptedPayout ( 0 );  // set you only want 50% of the 50% SBD payout.  // for a 100% SP payout, set this value as 0 (zero).  $options -> percentSteemDollars ( 5000 );  // now, broadcast both operations at once.  $response   =   $sdk -> broadcast ( $post ,   $options );",
            "title": "Comment With Comment Options Example:"
        }
    ]
}